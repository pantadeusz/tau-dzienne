package pl.tau.dbdemo.dao;

import static org.junit.Assert.*;

import org.junit.*;
import org.junit.rules.Timeout;
import org.junit.runner.RunWith;
import org.junit.runners.JUnit4;
import pl.tau.dbdemo.domain.Person;
import java.sql.*;
import static org.hamcrest.CoreMatchers.*;

import java.sql.SQLException;
import java.util.LinkedList;
import java.util.List;
import java.util.Random;
import java.util.logging.Level;
import java.util.logging.Logger;

@RunWith(JUnit4.class)
public class PersonDaoTest {
    private static final Logger LOGGER = Logger.getLogger(PersonDaoTest.class.getCanonicalName());

    @Rule
    public Timeout globalTimeout = new Timeout(1000);

    public static String url = "jdbc:hsqldb:hsql://localhost/workdb";

    PersonDao personManager;
    List<Person> expectedDbState;

    @Before
    public void setup() throws SQLException {
        Connection connection = DriverManager.getConnection(url);
        try {
            connection.createStatement()
                    .executeUpdate("CREATE TABLE " +
                            "Person(id bigint GENERATED BY DEFAULT AS IDENTITY, "
                            + "name varchar(20) NOT NULL, " + "yob integer)");

        } catch (SQLException e) {}

        Random rand = new Random();
        PreparedStatement addPersonStmt = connection.prepareStatement(
                "INSERT INTO Person (name, yob) VALUES (?, ?)",
                Statement.RETURN_GENERATED_KEYS);

        expectedDbState = new LinkedList<Person>();
        for (int i = 0; i < 10; i++) {
            Person person = new Person("Matuzalem" + rand.nextInt(1000), 1000 + rand.nextInt(1000));
            try {
                addPersonStmt.setString(1, person.getName());
                addPersonStmt.setInt(2, person.getYob());
                addPersonStmt.executeUpdate();
                ResultSet generatedKeys = addPersonStmt.getGeneratedKeys();
                if (generatedKeys.next()) {
                    person.setId(generatedKeys.getLong(1));
                }
            } catch (SQLException e) {
                throw new IllegalStateException(e.getMessage() + "\n" + e.getStackTrace().toString());
            }

            expectedDbState.add(person);
        }
        personManager = new PersonDaoJdbcImpl(connection);
    }

    @After
    public void cleanup() throws SQLException{
        Connection connection = DriverManager.getConnection(url);
        try {
            connection.prepareStatement("DELETE FROM Person").executeUpdate();
        } catch (Exception e) {
            LOGGER.log(Level.FINEST,"Probably the database was not yet initialized");
        }
    }

    @Test
    public void checkAdding() throws Exception {
        Person person = new Person();
        person.setName("Janek");
        person.setYob(1939);

        assertEquals(1, personManager.addPerson(person));

        expectedDbState.add(person);
        assertThat(personManager.getAllPersons(), equalTo(expectedDbState));
    }

    @Test
    public void checkGetting() throws Exception {
        Person person = expectedDbState.get(7);
        assertEquals(person, personManager.getPerson(person.getId()));
    }

    @Test(expected = SQLException.class)
    public void checkDeleting() throws SQLException {
        Person p = expectedDbState.get(3);
        expectedDbState.remove(p);
        assertEquals(1, personManager.deletePerson(p));
        assertThat(personManager.getAllPersons(), equalTo(expectedDbState));
        assertNull(personManager.getPerson(p.getId()));
    }

    @Test()
    public void checkUpdatingSuccess() throws SQLException {
        Person p = expectedDbState.get(3);
        p.setName("Janusz");
        expectedDbState.set(3, p);
        assertEquals(1, personManager.updatePerson(p));
        assertThat(personManager.getAllPersons(), equalTo(expectedDbState));
    }

    @Test(expected = SQLException.class)
    public void checkUpdatingFailure() throws SQLException {
        Person p = new Person("Janusz",123);
        assertEquals(1, personManager.updatePerson(p));
    }

}
